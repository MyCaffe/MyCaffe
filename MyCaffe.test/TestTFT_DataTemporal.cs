using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MyCaffe.param;
using MyCaffe.basecode;
using MyCaffe.common;
using MyCaffe.fillers;
using MyCaffe.layers;
using MyCaffe.db.image;
using MyCaffe.basecode.descriptors;
using MyCaffe.data;
using MyCaffe.layers.tft;

/// <summary>
/// Testing the DataTemporal.
/// </remarks> 
namespace MyCaffe.test
{
    [TestClass]
    public class TestTFT_DataTemporal
    {
        [TestMethod]
        public void TestForward()
        {
            DataTemporalTest test = new DataTemporalTest();

            try
            {
                foreach (IDataTemporalTest t in test.Tests)
                {
                    t.TestForward();
                }
            }
            finally
            {
                test.Dispose();
            }
        }
    }

    interface IDataTemporalTest : ITest
    {
        void TestForward();
    }

    class DataTemporalTest : TestBase
    {
        public DataTemporalTest(EngineParameter.Engine engine = EngineParameter.Engine.DEFAULT)
            : base("TFT DataTemporal Test", TestBase.DEFAULT_DEVICE_ID, engine)
        {
        }

        protected override ITest create(common.DataType dt, string strName, int nDeviceID, EngineParameter.Engine engine)
        {
            if (dt == common.DataType.DOUBLE)
                return new DataTemporalTest<double>(strName, nDeviceID, engine);
            else
                return new DataTemporalTest<float>(strName, nDeviceID, engine);
        }
    }

    class DataTemporalTest<T> : TestEx<T>, IDataTemporalTest
    {
        Blob<T> m_blobBottomLabels;
        BlobCollection<T> m_colData = new BlobCollection<T>();
        BlobCollection<T> m_colLabels = new BlobCollection<T>();

        public DataTemporalTest(string strName, int nDeviceID, EngineParameter.Engine engine)
            : base(strName, null, nDeviceID)
        {
            m_engine = engine;
        }

        protected override void dispose()
        {
            m_colData.Dispose();
            base.dispose();
        }

        protected override FillerParameter getFillerParam()
        {
            return new FillerParameter("gaussian");
        }

        private string getTestDataPath()
        {
            return "c:\\temp\\projects\\TFT\\tft-torch-sample\\tft-torch-sample\\test\\iter_0\\";
        }

        private string getTestWtsPath()
        {
            return "c:\\temp\\projects\\TFT\\tft-torch-sample\\tft-torch-sample\\data\\favorita\\weights\\static_enrichment_grn\\";
        }

        private string buildModel(int nNumSamples, int nNumHist, int nNumFuture)
        {
            NetParameter p = new NetParameter();
            p.name = "tft_net";


            //---------------------------------
            //  Temporal Self-attention
            //---------------------------------
            LayerParameter data = new LayerParameter(LayerParameter.LayerType.DATA_TEMPORAL, "data");
            data.data_temporal_param.batch_size = (uint)nNumSamples;
            data.data_temporal_param.num_historical_steps = (uint)nNumHist;
            data.data_temporal_param.num_future_steps = (uint)nNumFuture;
            data.data_temporal_param.source = "C:\\temp\\projects\\TFT\\tft-torch-sample\\tft-torch-sample\\data\\favorita";
            data.data_temporal_param.source_type = param.tft.DataTemporalParameter.SOURCE_TYPE.PATH_NPY_FILE;
            data.top.Add("static_numeric");
            data.top.Add("static_categorical");
            data.top.Add("historical_numeric");
            data.top.Add("historical_categorical");
            data.top.Add("future_numeric");
            data.top.Add("future_categorical");
            data.top.Add("target");
            p.layer.Add(data);

            return p.ToProto("root").ToString();
        }

        /// <summary>
        /// Test the forward pass for self attention
        /// </summary>
        /// <remarks>
        /// To generate test data:
        /// Run test_8_interpmultiheadattn_hist_focused.py on fresh 'test\iter_0' data
        /// 
        /// Fresh test\iter_0 data generated by running:
        /// training.py with TemporalFusionTransformer options: debug=True, tag='tft', use_mycaffe=True
        /// </remarks>
        public void TestForward()
        {
            string strPath = getTestDataPath();
            string strPathWt = getTestWtsPath();
            Blob<T> blobVal = null;
            Blob<T> blobWork = null;
            Blob<T> blob1 = null;

            Net<T> net = null;
            int nNumSamples = 256;
            int nNumHist = 90;
            int nNumFuture = 30;

            try
            {
                blobVal = new Blob<T>(m_cuda, m_log);
                blobWork = new Blob<T>(m_cuda, m_log);

                string strModel = buildModel(nNumSamples, nNumHist, nNumFuture);
                RawProto rp = RawProto.Parse(strModel);
                NetParameter param = NetParameter.FromProto(rp);

                net = new Net<T>(m_cuda, m_log, param, null, null);

                BlobCollection<T> colRes = net.Forward();

                blob1 = net.FindBlob("static_numeric");
                m_log.CHECK(blob1 != null, "Could not find the blob 'static_numeric'!");
                m_log.CHECK(blob1.CompareShape(new List<int>() { 0 }), "The blob shape is different than expected");

                blob1 = net.FindBlob("static_categorical");
                m_log.CHECK(blob1 != null, "Could not find the blob 'static_categorical'!");
                m_log.CHECK(blob1.CompareShape(new List<int>() { 256, 9 }), "The blob shape is different than expected");

                blob1 = net.FindBlob("historical_numeric");
                m_log.CHECK(blob1 != null, "Could not find the blob 'historical_numeric'!");
                m_log.CHECK(blob1.CompareShape(new List<int>() { 256, 90, 4 }), "The blob shape is different than expected");

                blob1 = net.FindBlob("historical_categorical");
                m_log.CHECK(blob1 != null, "Could not find the blob 'historical_categorical'!");
                m_log.CHECK(blob1.CompareShape(new List<int>() { 256, 90, 7 }), "The blob shape is different than expected");

                blob1 = net.FindBlob("future_numeric");
                m_log.CHECK(blob1 != null, "Could not find the blob 'future_numeric'!");
                m_log.CHECK(blob1.CompareShape(new List<int>() { 256, 30, 1 }), "The blob shape is different than expected");

                blob1 = net.FindBlob("future_categorical");
                m_log.CHECK(blob1 != null, "Could not find the blob 'future_categorical'!");
                m_log.CHECK(blob1.CompareShape(new List<int>() { 256, 30, 7 }), "The blob shape is different than expected");

                blob1 = net.FindBlob("target");
                m_log.CHECK(blob1 != null, "Could not find the blob 'target'!");
                m_log.CHECK(blob1.CompareShape(new List<int>() { 256, 30 }), "The blob shape is different than expected");
            }
            catch (Exception ex)
            {
                dispose(ref blobVal);
                dispose(ref blobWork);

                if (net != null)
                    net.Dispose();
            }
        }
    }
}
